services:
  grafana:
    # https://grafana.com/docs/grafana/latest/setup-grafana/installation/docker/
    image: docker.io/grafana/grafana-enterprise
    restart: always
    ports:
      - 3000:3000
    environment:
    # https://grafana.com/docs/grafana/latest/administration/configuration/
    # GF_SERVER_ROOT_URL: 'http://monitor.dev.local'
      # 允許匿名存取, 應避免在正式環境中啟用
      GF_AUTH_ANONYMOUS_ENABLED: "true"
      GF_AUTH_ANONYMOUS_ORG_ROLE: Admin
      GF_AUTH_DISABLE_LOGIN_FORM: "true"
      # 管理者帳號密碼, 應避免在正式環境中使用預設值
      # GF_SECURITY_ADMIN_USER: 'admin'
      # GF_SECURITY_ADMIN_PASSWORD: 'admin'
      # GF_SECURITY_ADMIN_PASSWORD__FILE: /run/secrets/grafana_admin.pwd
      # 避免連接外網
      GF_SECURITY_DISABLE_GRAVATAR: "true"
      GF_ANALYTICS_ENABLED: "false"
      GF_ANALYTICS_REPORTING_ENABLED: "false"
      GF_ANALYTICS_CHECK_FOR_UPDATES: "false"
      GF_ANALYTICS_CHECK_FOR_PLUGIN_UPDATES: "false"
      GF_ANALYTICS_FEEDBACK_LINKS_ENABLED: "false"
      GF_NEWS_NEWS_FEED_ENABLED: "false"
    volumes:
      - grafana_data:/var/lib/grafana
      # https://grafana.com/tutorials/provision-dashboards-and-data-sources/#introduction
      - ./etc/datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml:ro
      # 如果要自動匯入 dashboard 的話
      # - ./etc/dashboards.yml:/etc/grafana/provisioning/dashboards/dashboards.yml:ro
      # - ./dashboards:/var/lib/grafana/dashboards
    healthcheck:
      test: wget -qO- --spider 'http://localhost:3000/api/health'
      interval: 30s
      timeout: 10s
      retries: 3
  prometheus:
    # https://github.com/prometheus/prometheus
    image: docker.io/prom/prometheus
    restart: always
    ports:
      - 9090:9090
    volumes:
      - prometheus_data:/prometheus
      - ./etc/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    command:
      # https://github.com/prometheus/prometheus/blob/main/Dockerfile
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      # https://prometheus.io/docs/prometheus/latest/storage/
      - "--storage.tsdb.retention.time=15d"
      # https://prometheus.io/docs/prometheus/latest/management_api/
      - "--web.enable-lifecycle"
      - "--web.enable-remote-write-receiver"
    # 如果需要自訂主機名稱對應IP的話
    # extra_hosts:
    #   - "somehost:127.0.0.2"
    healthcheck:
      test: wget -qO- --spider 'http://localhost:9090/-/healthy'
      interval: 30s
      timeout: 10s
      retries: 3
  loki:
    # https://grafana.com/docs/loki/latest/setup/install/docker/
    image: docker.io/grafana/loki
    restart: always
    ports:
      - 3100:3100
    volumes:
      - loki_data:/loki
      - ./etc/loki.yml:/etc/loki/loki.yml:ro
    command:
      # https://grafana.com/docs/loki/latest/configure/
      - -config.file=/etc/loki/loki.yml
      # disable anonymous usage reporting
      - -reporting.enabled=false
      # https://grafana.com/docs/loki/latest/operations/storage/table-manager/#retention
      - -table-manager.retention-period=${LOKI_RETENTION_PERIOD:-90d}
      - -table-manager.retention-deletes-enabled=true
      # mitigating: too many outstanding requests
      # https://github.com/grafana/loki/issues/5123#issuecomment-1167018445
      - -querier.max-outstanding-requests-per-tenant=4096
      - -querier.split-queries-by-interval=15m
      - -query-scheduler.max-outstanding-requests-per-tenant=4096
    healthcheck:
      test: wget -qO- --spider 'http://localhost:3100/ready'
      interval: 30s
      timeout: 10s
      retries: 3
  alloy:
    # https://grafana.com/docs/alloy/latest/set-up/install/docker/
    image: docker.io/grafana/alloy
    restart: always
    ports:
      - 4317:4317 # OTLP over gRPC
      - 12345:12345 # Alloy UI
    volumes:
      - alloy_data:/var/lib/alloy/data
      - ./etc/config.alloy:/etc/alloy/config.alloy:ro
    command:
      # https://grafana.com/docs/alloy/latest/reference/cli/run/
      - run
      # expose the UI on port 12345
      - --server.http.listen-addr=0.0.0.0:12345
      # Disable data collection
      - --disable-reporting=true
      # Base directory where components can store data
      - --storage.path=/var/lib/alloy/data
      - /etc/alloy/config.alloy
    healthcheck:
      test: ["CMD-SHELL", "bash -c 'exec 3<>/dev/tcp/localhost/12345; echo -e \"GET /-/ready HTTP/1.1\\r\\nHost: localhost\\r\\nConnection: close\\r\\n\\r\\n\" >&3; cat <&3 | grep -q \"HTTP/1.1 200 OK\"' || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  grafana_data:
  loki_data:
  prometheus_data:
  alloy_data:
